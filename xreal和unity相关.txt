1、xreal air2 ultra眼镜的购买和使用
    1）眼镜本身无法单独使用，必须用官方支持的安卓手机或beam pro才能使用ar应用
    2）建议购买beam pro，能较好体验自带的空间应用nebula（nebula下可以显示一个app以及一个手机投屏，一共两个并排的屏幕）
    3）接安卓手机的话，要安装的是叫xreal的app，可以显示三个及以上并排的窗口，但意义不大，主要问题是和beam pro下不一样，不一定能很好体验6Dof
    4）ultra + beam pro的使用：
        a）beam pro和眼镜连接，注意苹果电脑的充电线用不了，可能除了原装线，必须是雷电线。
        b）beam pro类似手机，打开后进入“我的眼镜”app
        c）最关键的是，“我的眼镜”的空间界面里，“home”按钮，按一下就会显示空间图标，再按一下会消失，所以可能不清楚而找不到图标。
            可以按2次home，或长按beam右侧的红色按钮，空间图标就会出现在眼镜正中。
        d）beam pro打开“我的眼镜”后：
            中间区域：用于触摸，类似鼠标移动
            home图标：用于显示和关闭空间图标的显示
            右上方的切换按钮：用于后台化“我的眼镜”
        e）眼镜按钮：
            第一个按钮：切换眼镜透明度，共3档
            第二个长条按钮：设置眼镜中的显示亮度（音量需要beam右侧的长条按钮设置）
            眼镜2个按钮的长按涉及到自定义功能
        f）beam按钮：
            红色按钮：长按用于复位空间图标位置
            长条按钮：条件音量
            第三个按钮：锁屏

2、unity的安装
    1）unity和unity 3D是指同一个软件
    2）安装unity hub：unity.cn中，安装unity hub
    3）安装unity（不行，build时发现openjdk、sdk、ndk没有）：
        a）不建议通过unity hub安装，因为出一点小错会导致整个系统无法正常启动
        b）单独下载安装：unity的2022长期支持版本(LTS)最新版
        c）单独下载：
            android sdk(developer.android.com/studio?hl=zh-cn，来自于xreal.gitbook.io)
            下载并安装：Android Build Support(https://unity.cn/releases/lts/2022的”查看Release Notes“，找到对应unity版本和操作系统版本的”Android Build Support“下载)
        d）单独下载安装(似乎不需要)
            java jdk和jre(https://www.oracle.com/java/technologies/downloads/)
            jdk22(https://download.oracle.com/java/22/latest/jdk-22_windows-x64_bin.msi)
            jre8(注意要点击一下下“JRE 8”这里，才能显示下载内容，然后注册oracle账户才能下载(jack.seaver@163.com:Jackseaver_112279))
            环境变量设置：
                JAVA_HOME：设置为如, d:\java\jdk-22
                PATH：增加%JAVA_HOME%\bin和d:\java\jre-8u421\bin
                记得点击“确定”按钮
                新开控制台，输入java或java -version验证已经正确安装
    4）用unity hub安装unity(https://unity.cn/releases/lts/2022)
        a）必须选中Android SDK & NDK Tools和OpenJDK
        b）必须退出360程序
        安装中，visual studio community可能安装报错，其他都正确，暂时不用管。此时可以新建项目并通过build。
        关于编译中的报错：Gradle build failed(用unity hub重新安装unity后，就正常了，可能主要是把unity安装在如D:\unity_install\editor\2022.3.37f1c1z这样比较浅的目录里，而不是之前过于深的目录里)

3、unity设置(xreal.gitbook.io, 可能需要tz)
    1）运行unity后，会进入hub，检查unity hub的设置，主要是: 偏好设置->安装->安装位置要对应好，特别是安装了多个版本时。
    2）下载NRSDK for unity(developer.xreal.com/download)
    3）新建项目，选择3D（Built-In Render Pipeline），确定后进入主界面
    4）导入NRSDK
        a)点选左下角Project中的Assets后，Assets->Import Package->Custom Package，选择下载的NRSDK文件，然后确保全选中，点击“Import”
        b)通过 NRSDK->Project Tips->Accept All, 处理存在的问题
    5）系统设置和demo使用
        a)设置系统参数：菜单File->Build Settings: 选择Android，点击“Switch Platform”，然后点击”Player Settings...“，按要求设置(xreal.gitbook.io/nrsdk/nrsdk-fundamentals/quickstart-for-android)
        b)设置NRSDK：界面Project->Assets->NRSDK->NRProjectConfig中，打开Plane Finding和Image Tracking
        c)导入NRSDK的演示案例HelloMR：
            1）界面Project->Assets->NRSDK->Demos->HelloMR
            2）很关键：此时需要在下方Project窗口中点击右上方的”Search by Type“按钮，并选择”scene“，此时所有demo文件夹变为图标形式，就能双击并使上方的三维场景中显示所选择scene，然后build中也能通过”Add Open Scene“导入该scene了。
            3）然后通过菜单File->Build Settings->Add Open Scene导入
        d)build，成功生成apk文件
        e)眼镜运行demo
            1）打开手机设备的开发者模式，通常是在”关于手机“的”软件版本“或”Build号“上连续点击7次，系统会显示开发者模式已经打开
            2）然后可以在”系统和更新“的”开发人员选项“里打开”USB调试“，然后再连接PC。点击Build and Run，就能把这个scene对应的apk传到设备如beam pro上
            3）断开beam pro和pc，连接眼镜，眼镜的空间图标中，即可以看到apk对应的app图标，如prj1，点击就能进入，能看见如HelloMR-3dof的那几个三维的XREAL字。

4、unity中Android Logcat
    1）unity打开window->package manager
    2）上方Package类型改为Unity Registry，并搜索android
    3）然后选择Android Logcat，点击install即可
    4）unity中可以打开window->Analysis->Android Logcat

5、unity的wifi adb
    1）方便执行adb：设置系统的path变量：D:\unity_install\editor\2022.3.37f1c1\Editor\Data\PlaybackEngines\AndroidPlayer\SDK\platform-tools
    2）beam通过usb连接pc，然后执行：
        a）adb tcpip 5555
        b）adb connect 192.168.124.25:5555(192.168.124.25为beam的ip地址)
    3）然后即可拔掉usb线。以后每次执行完b）之后，一段时间内，unity的build里就能看到wifi下的beam，可以直接build and run到beam里。
    4）有时报错：adb server version (32) doesn't match this client (41); killing...
        有线连一下，然后执行adb tcpip 5555，即可（可能和360等软件有关）

6、unity中的TextMesh Pro对象导入中文字体
    0）使用：Hierarchy里新建一个Text(TMP),Font Asset设置为后面生成的字体即可。
    1）创建字体：
        打开unity的windows->TextMeshPro->Font Asset Creator
        Source Font File选择一个字体（字体可以直接从windows\fonts里拖一个到Assets下的TextMesh Pro->Resources->Fonts & Materials里）
        Sampling Point Size似乎用Auto即可
        Padding暂时用0
        Packing Method暂时用Fast
        Atlas Resolution用4090和4096
        Character Set用Characters from File
        Character File用下载的20000个汉字表+符号+英文字符集.txt
        Render Mode暂时用SDFAA_HINTED，AA结尾的是快而质量低，HINTED结尾的是将字符像素与纹理像素对齐以获得更清晰的结果
        Get Kerning Paris暂时选中
        然后点击generate，然后存盘即可
    2）用的时候，Text(TMP)里
        Extra Settings->Shader，必须选择不是Bitmap的，否则字看起来一片模糊

7、关于unity导入和新建c#文件的位置
    1）assetstore.unity.com项目，点击open in unity后，unity hub会有一下反应，而后续又没有新项目被打开。而实际情况是，手动打开unity而不是hub，就能看到项目并下载导入。
    2）导入TMPro等库后，vs下using无效：
        a）找到了using无效的原因：c#文件创建在了Asserts->NRSDK->Input->Script下(文件没有指向Assebly-CSharp.dll）
        b）解决办法，要在Assets下或者Assets->c#（新建的文件夹）下，而不是在Asserts->NRSDK->Input->Scripts下，新建c#代码。这样才能保证c#文件的Assembly Information里不是NRSDK.dll而是Assebly-CSharp.dll。

8、关于unity的c#的线程机制
    1)task为线程机制，但task中不能直接访问unity的对象或api（这些对象在unity主线程中），需要做特殊处理，获取主线程context
        a）awake中声明：private SynchronizationContext syncContext;
        b）start中关联：syncContext = SynchronizationContext.Current;
        c）task中调用：syncContext.Post((function => { UpdateUnityUI(msg); }), null);
    2）协程机制：为主线程中运行，可以用于定时处理短流程，似乎无法用于运行长流程（界面主线程会阻塞，需要用task或thread而不是协程来解决）。

9、unity安装NuGetForUnity
    1)package manager安装：https://github.com/GlitchEnzo/NuGetForUnity.git?path=/src/NuGetForUnity

10、unity安装redis
    1)NuGetForUnity搜索Redis，安装StackExchange.Redis，即可
    2）c#中：
        引用：using StackExchange.Redis;
        代码：
            ConnectionMultiplexer m_redis_connect;
            IDatabase m_redis;
            m_redis_connect = ConnectionMultiplexer.Connect("localhost:6379");
            m_redis = m_redis_connect.GetDatabase();
            m_redis.StringSet("cmd_key", "Redis你好");
            string res = m_redis.StringGet("cmd_key");
    3)用NuGetForUnity安装重要库：System.Runtime.CompilerServices.Unsafe（不安装，则game模式正常，而build and run时报错）

11、安装支持tls的redis-stack-server(只能在ubuntu或wsl下，win下没有)
    一、配置 Redis 服务器以支持 SSL/TLS
        步骤 1：（win下其实没用，必须wsl才能装支持tls的redis-stack-server）下载 OpenSSL（如果尚未安装）
            1.访问 Win32 OpenSSL 下载页面。
            2.下载适合你系统的安装包（Win64 OpenSSL或Win32 OpenSSL）。
            3.安装 OpenSSL，并确保其可执行文件路径被添加到系统环境变量的 PATH 中。

        步骤 2：（安卓设备必须用证书机构签发的证书，不能用自生成证书）获取签名证书
            （没用）0.重新安装openssl(因为cmd下运行的openssl可能是conda安装的低版本，会找不到openssl.cnf文件)：https://slproweb.com/products/Win32OpenSSL.html，选择对应版本，安装到如c:\openssl-win64下（安装最后的捐钱选项去掉）
            （没用）1.打开命令提示符并进入 OpenSSL 的安装目录（C:\OpenSSL-Win64\bin）。
            1.阿里云里:
                a)必须在主页而不是控制台里，搜索“ssl证书“，然后选择”个人测试证书”的“管理控制台”，然后进入“ssl证书管理”，选择“个人测试证书”
                b）点选“立即购买”购买免费证书，然后点选“创建证书”（必须这里获得的才是新的，千万不要选择了下面的已过期的证书进行下载），绑定powerai.cc
                c）新的证书处于“已签发”状态后，下载Apache的“crt/key”证书（包括key、public.crt和chain.crt三个文件），并且下载根证书（xxx-root.cer文件，根据官方说明是非浏览器访问需要的）。
            2.进入wsl
            （没用）3.运行以下命令生成证书：
                openssl genrsa -out redis-server.key 2048
                    openssl：OpenSSL 工具命令。
                    genrsa：命令生成一个 RSA 私钥。
                    -out redis-server.key：指定输出密钥文件的名称。
                    2048：密钥长度为 2048 比特。
                openssl req -new -key redis-server.key -out redis-server.csr -subj "/CN=localhost"
                    openssl：OpenSSL 工具命令。
                    req：创建并处理证书签名请求。
                    -new：创建新的 CSR。
                    -key redis-server.key：指定用于签署 CSR 的私钥文件。
                    -out redis-server.csr：指定输出 CSR 文件的名称。
                    -subj：直接指定证书的主题信息。
                    /CN=localhost：证书的主题信息，其中 CN 表示公共名称。
                openssl x509 -req -in redis-server.csr -signkey redis-server.key -out redis-server.crt
                    openssl：OpenSSL 工具命令。
                    x509：用于管理证书的 OpenSSL 子命令。
                    -req：指示输入是一个 CSR 文件。
                    -in redis-server.csr：指定输入的 CSR 文件的名称。
                    -signkey redis-server.key：使用指定私钥文件进行签署。
                    -out redis-server.crt：指定输出证书文件的名称。

            3.处理证书文件：
                1）将生成的key 和 public.crt 复制到某个目录(如/opt/redis-stack或/home/tutu下，注意不能是/home/tutu/models这种wsl映射的volume下，否则权限有问题，redis启动不了)。
                2）在/opt/redis-stack，运行：sudo ln -s ~/models/powerai* .

        步骤 3：配置 Redis 服务器
            0.下载支持tls的wsl redis
                1）下载并添加 Redis Stack 的 GPG 密钥：
                    curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
                2)将 Redis Stack 的存储库添加到你的系统源列表中：
                    echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -c -s) main" | sudo tee /etc/apt/sources.list.d/redis-stack.list
                3)更新包列表并安装 redis-stack-server：
                    sudo apt update
                    sudo apt install redis-stack-server -y
                4)启动redis
                    sudo service redis-stack-server start
                    sudo service redis-stack-server status
                5）配置
                    找到redis-stack.conf文件：sudo find / -name redis-stack.conf 2>/dev/null
                    sudo nano /opt/redis-stack/etc/redis-stack.conf
                        把port 6379这一行去掉，加入以下内容（unity调用的话，必须增加tls-auth-clients no从而关闭redis服务的双向TLS认证）：
tls-cert-file /home/tutu/models/xxx-public.crt
tls-key-file /home/tutu/models/xxx.key
tls-ca-cert-file /home/tutu/models/xxx-chain.crt
tls-auth-clients no
tls-port 6380
port 0
                    sudo service redis-stack-server restart
                    sudo service redis-stack-server status（会显示：Ready to accept connections tls）

    二、使用 StackExchange.Redis 以 SSL/TLS 方式连接到 Redis 服务器
        步骤 1：安装 StackExchange.Redis
            在 Unity 项目中安装 StackExchange.Redis 库：
            1.打开 Unity 项目。
            2.使用 NuGet for Unity 或直接下载 StackExchange.Redis DLL 并添加到 Unity 项目的 Plugins 文件夹中。
            3.如果使用 NuGet for Unity，打开 Unity Package Manager，搜索 StackExchange.Redis 并安装。

        步骤 2-1：配置代码(已测，成功)（unity的c#）
            在 Unity 项目中，编写代码以使用 SSL/TLS 方式连接到 Redis 服务器：
            using StackExchange.Redis;
            using System;
            using System.Security.Authentication;

            //用于ConnectionMultiplexer.Connect的初始化
            ConfigurationOptions options = new ConfigurationOptions
            {
                EndPoints = { "172.27.67.106:6380" },   // 替换为你的 Redis 服务器地址和端口
                Ssl = true,                             // 启用 TLS
                SslHost = "172.27.67.106",              // 服务器的主机名（通常是你的 Redis 服务器地址）
                Password = "",                          // 如果 Redis 服务器设置了密码，填写在这里
                AbortOnConnectFail = false              // 避免首次连接失败时抛出异常
            };
            //用于自定义证书的验证回调函数
            options.CertificateValidation += (sender, cert, chain, sslPolicyErrors) =>
            {
                // 在这里实现自定义的证书验证逻辑
                return true; // 始终返回 true 以忽略证书错误（仅在开发环境中使用）
            };
            //options用于ConnectionMultiplexer.Connect的初始化，即可
            m_redis_connect = ConnectionMultiplexer.Connect(options);

        步骤 2-2：配置代码(已测，成功)（python：注意key、crt文件要复制到如d:\models\下）
            import redis
            import ssl

            # 配置连接参数
            redis_host = 'localhost'
            redis_port = 6380  # 假设 Redis 使用的是启用 TLS 的端口
            redis_password = ''  # 如果 Redis 设置了密码，请填写此处

            # SSL/TLS 相关参数
            ssl_context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
            ssl_context.check_hostname = False  # 如果不验证主机名，可以将其设置为 False
            ssl_context.verify_mode = ssl.CERT_NONE  # 如果不验证证书，可以将其设置为 CERT_NONE

            # 创建 Redis 连接对象
            redis_client = redis.StrictRedis(
                host=redis_host,
                port=redis_port,
                password=redis_password,
                ssl=True,
                ssl_cert_reqs=None,
                ssl_ca_certs=None,
                ssl_keyfile='d:\\models\\redis.key',
                ssl_certfile='d:\\models\\redis.crt',
            )

            # 测试连接
            try:
                pong = redis_client.ping()
                if pong:
                    print('Connected to Redis server with SSL/TLS successfully!')
            except Exception as e:
                print(f'Error connecting to Redis server: {e}')

        注意事项
        · 如果使用自签名证书并且 SSL/TLS 连接失败，尝试禁用证书验证（如上面的 CertificateValidation = false 设置）。
        · 使用生产级别的证书时应启用证书验证，并确保证书的可信链完整。

11-1、顺便设置vllm的openai api支持https
    1)vllm的启动参数增加：
        --ssl-keyfile=/opt/redis-stack/redis.key
        --ssl-certfile=/opt/redis-stack/redis.crt
    2)win下的client调用测试（注意一个空格都不能多，修改ip和model名字即可）：curl -k https://localhost:8001/v1/chat/completions -H "Content-Type: application/json" -H "Authorization: Bearer empty" -d "{\"model\": \"qwen14\", \"messages\": [{\"role\": \"user\", \"content\": \"who are you?\"}], \"max_tokens\":100}"
    3)(测试通过)openai api的调用修改，必须增加http_client=openai.DefaultHttpxClient(verify=False)，否则会报错(SSL: CERTIFICATE_VERIFY_FAILED)：
        a）测试
            self.openai = OpenAI(
                api_key=self.api_key,
                base_url=self.url,
                # http_client=openai.DefaultHttpxClient(verify=False),    # 用于自建的vllm openai api的ssl临时https访问(由于verify为falst，unity安卓设备仍然不能访问外网)。阿里云购买了正式证书（可以是免费的）后，即可开启verify，也就是去掉本行
            )
        b）测试结果：
            # 测试https（阿里云购买的免费ssl证书，绑定在powerai.cc）
            # url='https://172.27.67.106:8001/v1/'  # 不通
            # url='https://116.62.63.204:8001/v1/'  # 不通
            # url='https://powerai.cc:8001/v1/'     # 通过
            # url='https://localhost:8001/v1/'      # 不通

    4)(测试通过)unity下的openai api的调用修改，必须增加一个HttpClientHandler，并用在HttpClient的初始化中，即可：
        HttpClientHandler handler = new HttpClientHandler
        {
            ServerCertificateCustomValidationCallback = (message, cert, chain, sslPolicyErrors) => true // 忽略证书验证
        };
        using (HttpClient client = new HttpClient(handler))
        ...

11-2、顺便设置streamlit应用支持https
    1）streamlit启动命令增加下述参数：
        --server.sslCertFile=D:\models\powerai.cc_public.crt
        --server.sslKeyFile=D:\models\powerai.cc.key
    2）streamlit界面里面的base_url由http改为https即可，可能需要重启浏览器，查看证书是否有效。

12、unity常见问题
    1）将c#代码拖到组件上时报错can't add script：
        解决方式，要确保c#文件的文件名和class名称，不能和已有文件名和class名称重复。
    2）名字空间：
        a）main.cs中如果要调用NRinput等库，只需要加入名字空间using NRKernal即可
        b）scene中如已建一个组件及其对应c#，则复制该组件及c#后，全局空间下的数据类如ChatCompletionResponse容易重复，此时可以考虑用namespace Openai_1和namespace Openai_2来区分。
    3）package安装：
        a）如openai包的安装，依赖test-framework：
            1）下载https://github.com/needle-mirror/com.unity.test-framework/releases中的压缩文件，解压后，用unity的package manager的install from dick打开其中的package.json安装即可。
            2）然后再安装openai包即可（需按照https://github.com/RageAgainstThePixel/com.openai.unity的要求按照）
