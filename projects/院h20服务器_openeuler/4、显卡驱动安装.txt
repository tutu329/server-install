1、安装依赖
    更换yun的国内镜像
        sudo cp /etc/yum.repos.d/openEuler.repo /etc/yum.repos.d/openEuler.repo.bak
        sudo sed -i 's|http://repo.openeuler.org|https://mirrors.aliyun.com/openeuler|g' /etc/yum.repos.d/openEuler.repo
        sudo yum clean all
        sudo yum makecache
    sudo yum install kernel-devel-$(uname -r) kernel-headers-$(uname -r) dkms gcc make tar gzip
2、设置
    setenforce 0
    sudo vi /etc/selinux/config(SELINUX=enforcing改为SELINUX=disabled)
3、下载安装cuda toolkit(包含了驱动和cuda运行库)
    1)https://developer.nvidia.com/cuda-downloads选择: Linux->x86_64->KylinOS->10->runfile(local)
    2)wget https://developer.download.nvidia.com/compute/cuda/12.8.1/local_installers/cuda_12.8.1_570.124.06_linux.run
    3)sudo sh cuda_12.8.1_570.124.06_linux.run
    4)vi ~/.bashrc(在"export PATH"这一行后面增加)
        export PATH=/usr/local/cuda-12.8/bin:$PATH
        export LD_LIBRARY_PATH=/usr/local/cuda-12.8/lib64:$LD_LIBRARY_PATH
    5)source ~/.bashrc
    6)nvcc --version和nvidia-smi即可ok
    7)设置显卡persistence模式
        sudo nvidia-persistenced --persistence-mode  # 启动守护进程
sudo tee /etc/systemd/system/nvidia-persistenced.service <<EOF
[Unit]
Description=NVIDIA Persistence Daemon
Wants=syslog.target

[Service]
Type=forking
ExecStart=/usr/bin/nvidia-persistenced --user root
ExecStopPost=/bin/rm -rf /var/run/nvidia-persistenced
Restart=always

[Install]
WantedBy=multi-user.target
EOF
        sudo systemctl enable nvidia-persistenced    # 设为开机自启
        sudo systemctl daemon-reload
        sudo systemctl enable --now nvidia-persistenced
4、查看功耗
    1)sudo yum install ipmitool
    2)查看sensor: sudo ipmitool sensor
    3)查看功耗: sudo ipmitool sdr | grep -i watt
    4)nvidia-smi查看nvlink情况: nvidia-smi topo -m

5、关于torch.cuda.is_available()报错，是因为sxm服务器必须启动nvidia-fabricmanager才行
    wget https://developer.download.nvidia.com/compute/cuda/repos/kylin10/x86_64/nvidia-fabric-manager-570.124.06-1.x86_64.rpm
    wget https://developer.download.nvidia.com/compute/cuda/repos/kylin10/x86_64/nvidia-persistenced-570.124.06-1.ky10.x86_64.rpm

    # 1. 写入 Kylin10 repo 文件
    sudo wget -O /etc/yum.repos.d/cuda-kylin10.repo https://developer.download.nvidia.com/compute/cuda/repos/kylin10/x86_64/cuda-kylin10.repo
    # 2. 导入 NVIDIA 公钥
    sudo rpm --import https://developer.download.nvidia.com/compute/cuda/repos/kylin10/x86_64/D42D0685.pub
    # 3. 刷新缓存
    sudo dnf clean all && sudo dnf makecache
    # 安装与驱动同版号的 Fabric Manager和Persistenced
    sudo dnf install -y nvidia-driver-libs-570.124.06
    sudo dnf install -y nvidia-fabric-manager-570.124.06 nvidia-persistenced-570.124.06
    sudo systemctl enable --now nvidia-fabricmanager
    sudo systemctl enable --now nvidia-persistenced
    验证：
        systemctl status nvidia-fabricmanager
        nvidia-smi nvlink -s         # NVSwitch 状态应为 Active
python - <<'EOF'
import torch, subprocess, os, platform
print("torch:", torch.__version__, "cuda libs:", torch.version.cuda)
print("is_available:", torch.cuda.is_available())
print("device_count:", torch.cuda.device_count())
EOF

    成功！

6、sglang推理deepseek r1需要g++
    sudo dnf install gcc-c++

7、sglang推理r1用NextN
    git clone https://github.com/sgl-project/sglang
    cd sglang/scripts
    python export_deepseek_nextn.py --input-dir ~/models/DeepSeek-R1 --output-dir ~/models/DeepSeek-R1-NextN

8、sglang推理r1的指令(1*H20单线程为30t/s)
    export CUDA_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
    export SGL_ENABLE_JIT_DEEPGEMM=1
    source /home/tutu/miniconda3/etc/profile.d/conda.sh
    conda activate sgl44
    python -m sglang.launch_server --served-model-name=ds-r1-671b --model-path=/home/tutu/models/DeepSeek-R1 --mem-fraction-static=0.9 \
    --enable-p2p-check \
    --tp=8 --max-total-tokens=65000 --max-running-requests=64 \
    --trust-remote-code --host=0.0.0.0 --port=28001 \
    --reasoning-parser=deepseek-r1 \
    # --enable-torch-compile --torch-compile-max-bs 1 \     # (开torch compile会oom)
    --enable-ep-moe \
    --speculative-algo NEXTN \
    --speculative-draft /home/tutu/models/DeepSeek-R1-NextN \
    --speculative-num-steps 2 \
    --speculative-eagle-topk 4 \
    --speculative-num-draft-tokens 4




