1、官网下载安装cuda-toolkit（包含驱动和运行库）
    此时nvidia-smi和nvcc -V正常
2、安装nvidia-driver-libs和nvidia-fabric-manager
    此时torch.cuda.is_available()才正常
3、安装gcc、g++
    如果sglang运行报错如：gcc: fatal error: cannot execute ‘cc1plus’: execvp: No such file or directory
        1）确保cuda-toolkit安装正常(nvcc)
        2）确保gcc、g++安装正常(gcc和cc1plus)
    涉及gcc、g++重新安装的解决办法：
        sudo apt install --reinstall build-essential g++ gcc
4、IB环境安装
    基本配置：
        1）安装IB驱动（后续官方仅维护DOCA-ofed，安装老的mlnx_ofed也可以）
            DOCA-ofed：https://developer.nvidia.com/doca-downloads（Host-Server->DOCA-Host->Linux->x86_64->doca-ofed->对应linux）
                【ubuntu22.04】
                    wget https://www.mellanox.com/downloads/DOCA/DOCA_v2.10.0/host/doca-host_2.10.0-093000-25.01-ubuntu2204_amd64.deb
                    sudo dpkg -i doca-host_2.10.0-093000-25.01-ubuntu2204_amd64.deb
                    sudo apt update
                    sudo apt -y install doca-ofed
                    sudo reboot(之后ifconfig就能显示8个ib网卡)
            mlnx_ofed:https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/
        2）安装工具
            sudo apt update
            sudo apt install -y opensm infiniband-diags rdma-core ibverbs-utils ibutils
        3）物理联通情况
            a）查看交换机是否均为绿灯
            b)rdma link show（查看连通情况和roce/ib模式）
        4)IB网卡的IB模式的确认
            若为roce（Ethernet）模式，切换为ib模式：
                sudo apt install mstflint
                sudo mst start
                mst status
                sudo mlxconfig -d /dev/mst/mt4123_pciconf0 q | grep LINK_TYPE
                sudo mlxconfig -d /dev/mst/mt4123_pciconf0 set LINK_TYPE_P1=1 LINK_TYPE_P2=1
                sudo mlxfwreset -d /dev/mst/mt4123_pciconf0 --yes 或者 sudo reboot
        5）启动opensm（opensm是ib网联通的关键，且只有一个节点需要启动opensm）
            a）确认opensm
                sudo opensm -v
                which opensm
            b）创建opensm服务
                vi /etc/systemd/system/opensm.service
[Unit]
Description=OpenSM InfiniBand Subnet Manager
After=network.target

[Service]
Type=simple
ExecStart=/usr/sbin/opensm
Restart=always
User=root
# 如果需要指定配置文件，可以在 ExecStart 后面加上 -c /etc/opensm/opensm.conf

[Install]
WantedBy=multi-user.target
            sudo systemctl daemon-reload
            sudo systemctl start opensm
            sudo systemctl enable opensm
            sudo systemctl status opensm
        6）如果nvidia-smi又报错（NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver. ）：
            检查结果发给gpt
                uname -r
                lsmod | grep nvidia
                sudo modprobe nvidia
                sudo dmesg | grep -i -E "nvidia|NVRM"
                dkms status
            gpt可能的解决方式
                sudo apt update
                sudo apt install linux-headers-$(uname -r)
                sudo dkms autoinstall
                sudo update-initramfs -u
                sudo reboot
            验证
                lsmod | grep nvidia
                nvidia-smi

    测试环境：
        apt install perftest
    测试0：
        ibstat
        lspci | grep -i infiniband
        show_gids
        nvidia-smi topo -m
        nvidia-smi nvlink -s

    测试1：
        服务器1：ib_write_bw -F --report_gbits
        服务器2：ib_write_bw -F 服务器1的IP --report_gbits
    测试2（正常结果BW peak大概43018.66MiB/s）：
        服务器1：ib_write_bw -d mlx5_0
        服务器2：ib_write_bw -d mlx5_0 服务器1的IP
5、sglang设置（节点0，节点1把rank改为1、模型路径改掉即可）
    1)几个关键点：
        a）NCCL_IB_HCA用于指定并行通信的IB口，NCCL_SOCKET_IFNAME和GLOO_SOCKET_IFNAME只是指定发起握手通信的网口（所以一个就行）
        b）NCCL_IB_GID_INDEX=3在roce环境下很关键（roce下系统默认情况会找错GID，GID可通过show_gids查看），ib不一定需要
        c）tp 16是2台服务器并行推理的关键
        d）mem-fraction-static是sglang预分配多少显存给模型，max-total-tokens是给模型分配多大的上下文空间（对显存容量影响较大），max-running-requests就是给模型开多大的并发访问数
        e）enable-torch-compile、enable-ep-moe和speculative是sglang对deepseek-r1这类模型的关键加速（单节点推理时，这几个参数影响很大，双节点不清楚为何没影响，还需要测试，可能和IB有关）
    2)2node-ds-r1-671b-8.sh（注意：sh文件里\之后的内容中不能有#，否则后续参数无视！）：
        export CUDA_VISIBLE_DEVICES=0,1,2,3,4,5,6,7
        export NCCL_IB_HCA=mlx5_0,mlx5_1,mlx5_2,mlx5_3,mlx5_4,mlx5_5,mlx5_6,mlx5_7

        export NCCL_SOCKET_FAMILY=AF_INET

        export NCCL_SOCKET_IFNAME=ens10f0np0
        export GLOO_SOCKET_IFNAME=ens10f0np0

        source /home/zsoft2/miniconda3/etc/profile.d/conda.sh
        conda activate deepseek
        cd ~/.cache/huggingface
        python -m sglang.launch_server --served-model-name=ds-r1-671b --model-path=deepseek-ai/DeepSeek-R1 \
        --enable-p2p-check \
        --reasoning-parser=deepseek-r1 --trust-remote-code \
        --tp 16 \
        --dist-init-addr 10.150.66.10:5000 \
        --nnodes 2 \
        --node-rank 1 \
        --host=0.0.0.0 --port=30000 \
        --mem-fraction-static=0.9 \
        --max-total-tokens=64000 --max-running-requests=256 \
        --disable-radix-cache \
        --enable-flashinfer-mla \
        --enable-ep-moe \
        --speculative-algo NEXTN \
        --speculative-draft /home/zsoft2/models/DeepSeek-R1-NextN \
        --speculative-num-steps 3 \
        --speculative-eagle-topk 1 \
        --speculative-num-draft-tokens 4

6、llm的api调用测试
    curl -X POST http://10.150.66.10:30000/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -d '{
        "model": "ds-r1-671b",
        "messages": [
          {"role": "system", "content": "You are a helpful assistant."},
          {"role": "user", "content": "写一首长诗"}
        ],
        "temperature": 0.7,
        "max_tokens": 1000
      }'

7、rdma_speed_ib.sh(用于实时监测8个ib网卡的流量，用于推理和训练的调试、优化)
    #!/usr/bin/env bash
    DEVICES=(mlx5_0 mlx5_1 mlx5_2 mlx5_3 mlx5_4 mlx5_5 mlx5_6 mlx5_7)
    PORT=1
    INTERVAL=5

    bytes(){ cat /sys/class/infiniband/$1/ports/$PORT/counters/$2; }

    while true; do
      declare -A TX1 RX1 TX2 RX2
      for D in "${DEVICES[@]}"; do
          RX1[$D]=$(bytes $D port_rcv_data)
          TX1[$D]=$(bytes $D port_xmit_data)
      done
      sleep $INTERVAL
      for D in "${DEVICES[@]}"; do
          RX2[$D]=$(bytes $D port_rcv_data)
          TX2[$D]=$(bytes $D port_xmit_data)
      done

      echo "$(date '+%F %T')"
      for D in "${DEVICES[@]}"; do
          RX_B=$(( ( ${RX2[$D]} - ${RX1[$D]} ) * 4 ))   # octets→bytes
          TX_B=$(( ( ${TX2[$D]} - ${TX1[$D]} ) * 4 ))
          RX_Mbps=$(echo "scale=1; $RX_B*8/1000000/$INTERVAL" | bc)
          TX_Mbps=$(echo "scale=1; $TX_B*8/1000000/$INTERVAL" | bc)
          printf "[%-6s] RX: %6s Mb/s | TX: %6s Mb/s\n" "$D" "$RX_Mbps" "$TX_Mbps"
      done
      echo
    done

8、关于nvidia-smi topo -m
    这样有问题(此时需要测试)
        1)sudo iblinkinfo测一下，必须要有sudo
        2)服务器0：sudo ibping -S -C mlx5_0
        3)服务器1：sudo ibping -C mlx5_0 8 （8为Lid，根据服务器0的rdma link show获得）
(deepseek) zsoft2@zsoft2-G8600-V7:~/models/DeepSeek-R1-NextN$ nvidia-smi topo -m
        GPU0    GPU1    GPU2    GPU3    GPU4    GPU5    GPU6    GPU7    NIC0    NIC1    NIC2    NIC3    NIC4    NIC5    NIC6    NIC7    CPU Affinity    NUMA Affinity   GPU NUMA ID
GPU0     X      NV18    NV18    NV18    NV18    NV18    NV18    NV18    PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS     0-47,96-143     0               N/A
GPU1    NV18     X      NV18    NV18    NV18    NV18    NV18    NV18    SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     0-47,96-143     0               N/A
GPU2    NV18    NV18     X      NV18    NV18    NV18    NV18    NV18    SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     0-47,96-143     0               N/A
GPU3    NV18    NV18    NV18     X      NV18    NV18    NV18    NV18    SYS     SYS     SYS     PIX     SYS     SYS     SYS     SYS     0-47,96-143     0               N/A
GPU4    NV18    NV18    NV18    NV18     X      NV18    NV18    NV18    SYS     SYS     SYS     SYS     PIX     SYS     SYS     SYS     48-95,144-191   1               N/A
GPU5    NV18    NV18    NV18    NV18    NV18     X      NV18    NV18    SYS     SYS     SYS     SYS     SYS     PIX     SYS     SYS     48-95,144-191   1               N/A
GPU6    NV18    NV18    NV18    NV18    NV18    NV18     X      NV18    SYS     SYS     SYS     SYS     SYS     SYS     PIX     SYS     48-95,144-191   1               N/A
GPU7    NV18    NV18    NV18    NV18    NV18    NV18    NV18     X      SYS     SYS     SYS     SYS     SYS     SYS     SYS     PIX     48-95,144-191   1               N/A
NIC0    PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS     SYS     SYS     SYS     SYS     SYS     SYS
NIC1    SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS     SYS     SYS     SYS     SYS     SYS
NIC2    SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS     SYS     SYS     SYS     SYS
NIC3    SYS     SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS     SYS     SYS     SYS
NIC4    SYS     SYS     SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS     SYS     SYS
NIC5    SYS     SYS     SYS     SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS     SYS
NIC6    SYS     SYS     SYS     SYS     SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X      SYS
NIC7    SYS     SYS     SYS     SYS     SYS     SYS     SYS     PIX     SYS     SYS     SYS     SYS     SYS     SYS     SYS      X

Legend:

  X    = Self
  SYS  = Connection traversing PCIe as well as the SMP interconnect between NUMA nodes (e.g., QPI/UPI)
  NODE = Connection traversing PCIe as well as the interconnect between PCIe Host Bridges within a NUMA node
  PHB  = Connection traversing PCIe as well as a PCIe Host Bridge (typically the CPU)
  PXB  = Connection traversing multiple PCIe bridges (without traversing the PCIe Host Bridge)
  PIX  = Connection traversing at most a single PCIe bridge
  NV#  = Connection traversing a bonded set of # NVLinks

NIC Legend:

  NIC0: mlx5_0
  NIC1: mlx5_1
  NIC2: mlx5_2
  NIC3: mlx5_3
  NIC4: mlx5_4
  NIC5: mlx5_5
  NIC6: mlx5_6
  NIC7: mlx5_7

9、nccl-test（只有IB设备可以，roce不能用）
    1)安装mpi
        sudo apt install -y openmpi-bin libopenmpi-dev
        mpicc --version
        查找mpi.h: find /usr -name mpi.h 2>/dev/null
        vi ~/.bashrc
            export CPATH=/usr/lib/x86_64-linux-gnu/openmpi/include/:$CPATH
            export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/openmpi/lib:$LD_LIBRARY_PATH
            export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/openmpi/lib:$LIBRARY_PATH
        source ~/.bashrc
    2)安装编译nccl-test
        git clone https://github.com/NVIDIA/nccl-tests.git
        cd nccl-tests
        make MPI=1
        mpirun
    3)服务器2设置SSH
        ssh-keygen（全部回车）
        ssh-copy-id zsoft@10.150.66.10(要输入密码A@zhongsoft)
        ssh-copy-id zsoft2@10.150.66.11(要输入密码A@zhongsoft)
        测试：
            ssh zsoft@10.150.66.10 hostname(免密)
            ssh zsoft2@10.150.66.11 hostname(免密)
    4)1节点测试
        ./build/all_reduce_perf -b 8 -e 128M -f 2 -g 8
    5)2节点测试(【注意】：如果2个服务器username不一样，mpirun就会卡死，此时需要把nccl-test文件夹复制到一样的地方如/mnt/share/nccl-test，不然会因为/home/zsoft/nccl-test和/home/zsoft2/nccl-test不一样导致mpirun卡死)
        vi ~/.ssh/config(因为mpirun -np 2 -H zsoft@10.150.66.10,zsoft2@10.150.66.11这样报错)
            # ~/.ssh/config
            Host 10.150.66.10
              User zsoft

            Host 10.150.66.11
              User zsoft2
        mpirun -np 2 -H 10.150.66.10,10.150.66.11 hostname
        # mpirun -np 2 -H zsoft@10.150.66.10,zsoft2@10.150.66.11 hostname

        测试1：
            mpirun -np 4 \
              -H 10.150.66.10:2,10.150.66.11:2 \
              --mca oob_tcp_if_include ens10f0np0 \
              --mca btl tcp,self \
              --mca btl_tcp_if_include ens10f0np0 \
              ./build/all_reduce_perf -b 8 -e 128M -f 2 -g 1
        测试2：
            HCA_LIST="mlx5_0,mlx5_1,mlx5_2,mlx5_3,mlx5_4,mlx5_5,mlx5_6,mlx5_7" \
            mpirun -np 4 \
              -H 10.150.66.10:2,10.150.66.11:2 \
              --mca pml ucx \
              --mca osc ucx \
              -x NCCL_DEBUG=WARN \
              -x NCCL_IB_DISABLE=0 \
              -x NCCL_IB_HCA=$HCA_LIST \
              -x NCCL_NET_GDR_LEVEL=2 \
              -x NCCL_IB_GID_INDEX=3 \
              -x NCCL_IB_PCI_RELAXED_ORDERING=1 \
              -x NCCL_SOCKET_IFNAME=ens10f0np0 \
              -x UCX_TLS=rc \
              -x UCX_NET_DEVICES=mlx5_0:1 \
              ./build/all_reduce_perf -b 8 -e 128M -f 2 -g 1